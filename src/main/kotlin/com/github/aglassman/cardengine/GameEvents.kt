package com.github.aglassman.cardengine

import java.io.Serializable

/**
 * A GameEvent represents an action that took place within the game. The events may not always
 * have a target player, and can be generated by the game itself.
 */
data class GameEvent(
    val targetPlayer: Player? = null,
    val eventType: String,
    val eventMessage: String? = null,
    val properties: Map<String, String> = emptyMap()
): Serializable

/**
 * A basic interface to gain access to all game events.
 */
interface EventEmitter {
  fun emit(gameEvent: GameEvent)
}

/**
 * A basic emitter that sends events to standard out.
 */
class StdOutEmitter: EventEmitter {
  override fun emit(gameEvent: GameEvent) {
    println(gameEvent)
  }
}

/**
 * A basic emitter that does nothing.
 */
class NoOpEmitter: EventEmitter {
  override fun emit(gameEvent: GameEvent) {}

}